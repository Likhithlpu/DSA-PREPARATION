# Analysis of Algorithms

Let's say we are doing analysis for a program which is sum of n natural numbers.
Now there are three different approaches by the different programmers.

```sql
Assuming the inputs are 10,100,1000
```

### Solution 1:

```cpp

int fun1(int n)
{
return n*(n+1)/2
}
```

In this solution, whatever input it is, it dosen't matter it will take only one time. Therefore the complexity of this algorithm is O(1)

### Solution 2:

```cpp

int fun2(int n)
{
int sum = 0;
for ( int i=1; i<=n ;i++){
sum = sum + i;
}
return sum;
}
```

In this solution the loop runs for the n times, that means if the input is 100 then the loop runs for the 100 times. if this is going to be the 1000 then it will run for the 1000 times.
Therefore the complexity of this algorithm is O(N)

### Solution 3:

```cpp

int fun3(int n)
{
int sum = 0;
for (int i=1; i<=n ; i++){
for (int j=i; j<= i; j++){
sum++;
}
}
return sum;
}
```

Now at first the loop is running for the n times and then the second loop is running for the i times. where therefore the complexity
of this algorithm will be O(n^2). ( Because the loop is running inside the loop therefore n*n would be n^2)

### Order of the Growth:

Constant < loglog(N) < log(N) < N^(1/3) < N^(1/2) < N < N^2 < N^3 < 2^N < N^N